// Height and Width

@each $name, $value in $proportional_widths {
	.#{$prefix}cw-#{$name} > * {
		width: $value;
	}
	.#{$prefix}w-#{$name} {
		width: $value;
	}
	@each $gutter_label, $gutter_value in $gutters {
		.#{$prefix}grid-#{$gutter_label}.#{$prefix}cw-#{$name} > * {
			width: calc(#{$value} - #{$gutter_value});
		}
		.#{$prefix}grid-#{$gutter_label} .#{$prefix}w-#{$name} {
			width: calc(#{$value} - #{$gutter_value});
		}
	}
}

@each $name in $responsive-proportional-width-classes {
	@each $breakpoint_label, $breakpoint_value in $breakpoints {
		@media (min-width: $breakpoint_value){
			.#{$prefix}cw-#{$name}\@#{$breakpoint_label} > * {
				width: map-get($proportional_widths, $name);
			}
			.#{$prefix}w-#{$name}\@#{$breakpoint_label} {
				width: map-get($proportional_widths, $name);
			}
			@each $gutter_label, $gutter_value in $gutters {
				.#{$prefix}grid-#{$gutter_label}.#{$prefix}cw-#{$name}\@#{$breakpoint_label} > * {
					width: calc(#{map-get($proportional_widths, $name)} - #{$gutter_value});
				}
				.#{$prefix}grid-#{$gutter_label} .#{$prefix}w-#{$name}\@#{$breakpoint_label} {
					width: calc(#{map-get($proportional_widths, $name)} - #{$gutter_value});
				}
			}
		}
	}
}

@include map-class('w', 'max-width', $widths);
@include map-class-responsive('w', 'max-width', $widths, $responsive-width-classes);

@include map-class('h', 'height', $heights);
@include map-class-responsive('h', 'height', $heights, $responsive-height-classes);

// Margin & Padding

@each $name, $value in $spacing {
	.#{$prefix}mrg-#{$name} {
		margin: $value 0;
	}
	.#{$prefix}pad-#{$name} {
		padding: $value;
	}
	@each $location in $locations {
		.#{$prefix}mrg-#{$location}-#{$name} {
			margin-#{$location}: $value;
		}
		.#{$prefix}pad-#{$location}-#{$name} {
			padding-#{$location}: $value;
		}
	}
}

@each $name in $responsive-spacing-classes {
	@each $breakpoint_label, $breakpoint_value in $breakpoints {
		@media (min-width: $breakpoint_value){
			.#{$prefix}mrg-#{$name}\@#{$breakpoint_label} {
				margin: map-get($spacing, $name) 0;
			}
			.#{$prefix}pad-#{$name}\@#{$breakpoint_label} {
				padding: map-get($spacing, $name);
			}
			@each $location in $locations {
				.#{$prefix}mrg-#{$location}-#{$name}\@#{$breakpoint_label} {
					margin-#{$location}: map-get($spacing, $name);
				}
				.#{$prefix}pad-#{$location}-#{$name}\@#{$breakpoint_label} {
					padding-#{$location}: map-get($spacing, $name);
				}
			}
		}
	}
}


// Grid

@include optional('grid') {
	display: flex;
	flex-wrap: wrap;
}

@each $gutter_label, $gutter_value in $gutters {
	.#{$prefix}grid-#{$gutter_label} {
		margin-left: -#{$gutter_value};
		margin-bottom: -#{$gutter_value};
		> * {
			margin-left: #{$gutter_value};
			margin-bottom: #{$gutter_value};
		}
	}
}

@include optional('grid-reverse'){
	flex-direction: row-reverse;
}

// Backgrounds

@each $name, $value in $colors {
	.#{$prefix}bg-#{$name} {
		background-color: $value;
		color: map-get($background-text-color, $name);
	}
}

@each $name in $responsive-color-classes {
	@each $breakpoint_label, $breakpoint_value in $breakpoints {
		@media (min-width: $breakpoint_value){
			.#{$prefix}bg-#{$name}\@#{$breakpoint_label} {
				background-color: map-get($colors, $name);
				color: map-get($background-text-color, $name);
			}
		}
	}
}

// Box Styles

@include optional('box') {
	box-shadow: $global-box-shadow;
	border-radius: $global-box-radius;
	padding: $global-box-padding;
}

// Utility

@include optional('container') {
	margin-left: auto;
	margin-right: auto;
	padding: 0 $container-padding;
}

@include optional('clearfix') {
	zoom: 1;
	&:before,
	&:after {
		content: ".";    
		display: block;    
		height: 0;    
		overflow: hidden;  
	}
	&:after { clear: both; }
}